$width-tiny: 15rem; //4bits 240px
$width-small: 30rem; //6bits 480px
$width-medium: 37.5rem; //8bits 600px
$width-wide: 57rem; //12bits 912px
$ultra-wide: 67rem; //14bits 1072px
$extra-ultra-wide: 77rem; //1232 /16bits

// Font-weights in CSS for proxima nova
// thin: 100
// light: 300
// regular: 400
// bold: 700
// black: 900

// ðŸŽŒ Responsve mixin for bubbling up media queries, have a look at the layout partial to see how they're used ðŸŽŒ

@mixin responsive($width){
  @if $width == tiny-screens{
    @media screen and (min-width: $width-tiny){
      @content;
    }
  }
  @else if $width == small-screens{
    @media screen and (min-width: $width-small){
      @content;
    }
  }
  @else if $width == medium-screens{
    @media screen and (min-width: $width-medium){
      @content;
    }
  }
  @else if $width == wide-screens{
    @media screen and (min-width: $width-wide){
      @content;
    }
  }
  @else if $width == ultra-wide-screens{
    @media screen and (min-width: $ultra-wide){
      @content;
    }
  }
  @else if $width == extra-ultra-wide-screens{
    @media screen and (min-width: $extra-ultra-wide){
      @content;
    }
  }
}

// ðŸŽŒ Grid Settings evolved from Frameless Grids, see http://www.jonikorpi.com/frameless/ for more background ðŸŽŒ

$font-size: 16px; 		// Your base font-size in pixels
$em: $font-size / 1em;	// Shorthand for outputting ems
$column: 48px;	// The column-width of your grid in pixels
$gutter: 24px;	// The gutter-width of your grid in pixels

//
// Column-widths in variables, in ems
//

 $cols1: ( 1 * ($column + $gutter) - $gutter) / $em;
 $cols2: ( 2 * ($column + $gutter) - $gutter) / $em;
 $cols3: ( 3 * ($column + $gutter) - $gutter) / $em;
 $cols4: ( 4 * ($column + $gutter) - $gutter) / $em;
 $cols5: ( 5 * ($column + $gutter) - $gutter) / $em;
 $cols6: ( 6 * ($column + $gutter) - $gutter) / $em;
 $cols7: ( 7 * ($column + $gutter) - $gutter) / $em;
 $cols8: ( 8 * ($column + $gutter) - $gutter) / $em;
 $cols9: ( 9 * ($column + $gutter) - $gutter) / $em;
$cols10: (10 * ($column + $gutter) - $gutter) / $em;
$cols11: (11 * ($column + $gutter) - $gutter) / $em;
$cols12: (12 * ($column + $gutter) - $gutter) / $em;
$cols13: (13 * ($column + $gutter) - $gutter) / $em;
$cols14: (14 * ($column + $gutter) - $gutter) / $em;
$cols15: (15 * ($column + $gutter) - $gutter) / $em;
$cols16: (16 * ($column + $gutter) - $gutter) / $em;

// ðŸŽŒ Mixin for setting element size in columns, have a look at the layout partial to see how they're used. ðŸŽŒ

@mixin width ($cols:1) {
	width: ($cols * ($column + $gutter) - $gutter) / $em;
}
@mixin min-width ($cols:1) {
	width: ($cols * ($column + $gutter) - $gutter) / $em;
}

// ðŸŽŒ Underlines  ðŸŽŒ

// Use CSS gradient and text shadow to create line that breaks for descenders
// Inspired by https://medium.com/designing-medium/7c03a9274f9
@mixin fancyUnderline( $color: currentColor, $bgcolor: #fff ) {
  @include background-image( linear-gradient( to bottom, $bgcolor 50%, $color 50%  ) );
  background-position: 0 90%;
  background-repeat: repeat-x;
  background-size: 1px 1px;
  text-decoration: none;
  // Add white space between underline and descenders
  text-shadow: -2px 0px 0px $bgcolor,
               -1px 0px 0px $bgcolor,
                1px 0px 0px $bgcolor,
                2px 0px 0px $bgcolor;
}

// ðŸŽŒColor VariablesðŸŽŒ
$link_green: #74BC70; 
$blue: #26B9D1;
$yellow: #FDC608;
$orange: #E9511D;
$purple: #AC2485;
$black: #333333;

$red: #a24249;
$gray: #a0a1b3;
$emphasis: #313437;
$nav_black: #1c242b;
$nav_gray: #f2f0ed;
$link_green: #74BC70;
$nav_links: #c8c6c2;
$nav_links-main: #aaa7a2;
$nav_links-main--current: #323940;
$slate: #303B40;
$nav_links-footer--blue: #8FC3EA;
$button-green: rgb(116, 188, 112);
$text-white: rgb(255, 255, 255);
$node-nav--inactive: #c8c6c2;
